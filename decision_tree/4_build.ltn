{"creationTime":1644760833946,"name":"notebook","chunks":[{"name":"NotebookFiles","data":{"files":[{"dataUri":"data:text/plain;base64,IyDQoNC10YjQsNC10Lwg0YHRgtGA0L7QuNGC0Ywg0LTQtdGA0LXQstC+INC00LDQu9GM0YjQtSDQuNC70Lgg0YHQvtC30LTQsNGC0Ywg0YLQtdGA0LzQuNC90LDQu9GM0L3Ri9C5INGD0LfQtdC7CmRlZiBzcGxpdChub2RlLCAgIyDRgtC10LrRg9GJ0LjQuSDRg9C30LXQuwogICAgICAgICAgbWF4X2RlcHRoLCAgIyDQvNCw0LrRgdC40LzQsNC70YzQvdCw0Y8g0LPQu9GD0LHQuNC90LAg0LTQtdGA0LXQstCwCiAgICAgICAgICBtaW5fc2l6ZSwgICMg0LzQuNC90LjQvNCw0LvRjNC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDRjdC70LXQvNC10L3RgtC+0LIg0LIg0L/QvtC00LLRi9Cx0L7RgNC60LUKICAgICAgICAgIGRlcHRoICAjINGC0LXQutGD0YnQsNGPINCz0LvRg9Cx0LjQvdCwINC00LXRgNC10LLQsAogICAgICAgICAgKToKICAgICMg0LXRgdC70Lgg0L3QtSDQsdGL0LvQviDRgNCw0LfQtNC10LvQtdC90LjRjyAtINCy0YHQtSDRjdC70LXQvNC10L3RgtGLINGD0YjQu9C4INCyINC+0LTQvdGDINGB0YLQvtGA0L7QvdGDCiAgICBpZiBub3Qgbm9kZS5sZWZ0IG9yIG5vdCBub2RlLnJpZ2h0OgogICAgICAgIG5vZGUubGVmdCA9IG5vZGUucmlnaHQgPSBUZXJtaW5hbE5vZGUobm9kZS5sZWZ0ICsgbm9kZS5yaWdodCkKICAgICAgICByZXR1cm4KCiAgICAjINC10YHQu9C4INC00L7RgdGC0LjQs9C90YPRgtCwINC80LDQutGB0LjQvNCw0LvRjNC90LDRjyDQs9C70YPQsdC40L3QsCwg0YLQviDRgdGC0YDQvtC40Lwg0YLQtdGA0LzQuNC90LDQu9GM0L3Ri9C1INGD0LfQu9GLCiAgICBpZiBkZXB0aCA+PSBtYXhfZGVwdGg6CiAgICAgICAgbm9kZS5sZWZ0ID0gVGVybWluYWxOb2RlKG5vZGUubGVmdCkKICAgICAgICBub2RlLnJpZ2h0ID0gVGVybWluYWxOb2RlKG5vZGUucmlnaHQpCiAgICAgICAgcmV0dXJuCgogICAgIyDRgdGC0YDQvtC40Lwg0LvQtdCy0L7QtSDQtNC+0YfQtdGA0L3QtdC1INC00LXRgNC10LLQvgogICAgaWYgbGVuKG5vZGUubGVmdCkgPD0gbWluX3NpemU6CiAgICAgICAgbm9kZS5sZWZ0ID0gVGVybWluYWxOb2RlKG5vZGUubGVmdCkKICAgIGVsc2U6CiAgICAgICAgbm9kZS5sZWZ0ID0gZ2V0X3NwbGl0KG5vZGUubGVmdCkKICAgICAgICBzcGxpdChub2RlLmxlZnQsIG1heF9kZXB0aCwgbWluX3NpemUsIGRlcHRoICsgMSkKCiAgICAjINGB0YLRgNC+0LjQvCDQv9GA0LDQstC+0LUg0LTQvtGH0LXRgNC90LXQtSDQtNC10YDQtdCy0L4KICAgIGlmIGxlbihub2RlLnJpZ2h0KSA8PSBtaW5fc2l6ZToKICAgICAgICBub2RlLnJpZ2h0ID0gVGVybWluYWxOb2RlKG5vZGUucmlnaHQpCiAgICBlbHNlOgogICAgICAgIG5vZGUucmlnaHQgPSBnZXRfc3BsaXQobm9kZS5yaWdodCkKICAgICAgICBzcGxpdChub2RlLnJpZ2h0LCBtYXhfZGVwdGgsIG1pbl9zaXplLCBkZXB0aCArIDEpCgoKIyDQv9C+0YHRgtGA0L7QuNC8INC00LXRgNC10LLQviDQvdCw0YfQuNC90LDRjyDQvtGCINC60L7RgNC90LXQstC+0LPQviDRg9C30LvQsApkZWYgYnVpbGRfdHJlZSh0cmFpbiwgbWF4X2RlcHRoLCBtaW5fc2l6ZSk6CiAgICByb290ID0gZ2V0X3NwbGl0KHRyYWluKQogICAgc3BsaXQocm9vdCwgbWF4X2RlcHRoLCBtaW5fc2l6ZSwgMSkKICAgIHJldHVybiByb290Cg==","name":"build_tree.py","type":"text/plain","lastModified":1624459674000},{"dataUri":"data:text/plain;base64,IyDQoNCw0YHRh9C40YLQsNGC0Ywg0LjQvdC00LXQutGBINCU0LbQuNC90Lgg0LTQu9GPINC00LDQvdC90L7Qs9C+INGA0LDQt9C00LXQu9C10L3QuNGPCiMg0Y3RgtCwINGA0LXQsNC70LjQt9Cw0YbQuNGPINC/0L7Qt9Cy0L7Qu9GP0LXRgiDRgNCw0LHQvtGC0LDRgtGMINGBINC70Y7QsdGL0Lwg0LrQvtC70LjRh9C10YHRgtCy0L7QvCDRgNCw0LfQtNC10LvQtdC90LjQuQpkZWYgZ2luaV9pbmRleChncm91cHMsICAjINGB0L/QuNGB0L7QuiDQv9C+0LTQstGL0LHQvtGA0L7QugogICAgICAgICAgICAgICBjbGFzc2VzICAjINGB0L/QuNGB0L7QuiDQstGB0LXRhSDQstC+0LfQvNC+0LbQvdGL0YUg0LrQu9Cw0YHRgdC+0LIKICAgICAgICAgICAgICAgKToKICAgICMg0L/QvtGB0YfQuNGC0LDRgtGMINC60L7Qu9C40YfQtdGB0YLQstC+INGN0LvQtdC80LXQvdGC0L7QsiDQsiDQv9C+0LTQstGL0LHQvtGA0LrQsNGFCiAgICB0b3RhbF9zYW1wbGVzID0gc3VtKFtsZW4oZ3JvdXApIGZvciBncm91cCBpbiBncm91cHNdKQoKICAgICMg0YHRg9C80LzQsCDQuNC90LTQtdC60YHQvtCyINCU0LbQuNC90Lgg0LTQu9GPINCy0YHQtdGFINC/0L7QtNCy0YvQsdC+0YDQvtC6CiAgICBnaW5pID0gMAoKICAgIGZvciBncm91cCBpbiBncm91cHM6ICAjINC00LvRjyDQutCw0LbQtNC+0Lkg0L/QvtC00LLRi9Cx0L7RgNC60LgKCiAgICAgICAgZ3JvdXBfc2l6ZSA9IGxlbihncm91cCkKCiAgICAgICAgaWYgZ3JvdXBfc2l6ZSA9PSAwOgogICAgICAgICAgICAjINCyINGB0LvRg9GH0LDQtSwg0LXRgdC70Lgg0L/QvtC00LLRi9Cx0L7RgNC60LAg0YDQsNCy0L3QsCDQvdGD0LvRjiwg0L3QtdGCINGB0LzRi9GB0LvQsCDRgdGH0LjRgtCw0YLRjAogICAgICAgICAgICAjINC4INGH0YLQvtCx0Ysg0LjQt9Cx0LXQttCw0YLRjCDQvtGI0LjQsdC60Lgg0LTQtdC70LXQvdC40Y8g0L3QsCDQvdC+0LvRjCwKICAgICAgICAgICAgIyDQt9Cw0LLQtdGA0YjQsNC10Lwg0Y3RgtC+0YIg0YbQuNC60LssINC90LDRh9C40L3QsNC10Lwg0YHQu9C10LTRg9GO0YnQuNC5CiAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICMgc2NvcmUgLSDRgdGD0LzQvNCwINC60LLQsNC00YDQsNGC0L7QsiDQv9GA0L7Qv9C+0YDRhtC40LkKICAgICAgICBzY29yZSA9IDAKCiAgICAgICAgZm9yIGNsYXNzX3ZhbCBpbiBjbGFzc2VzOgogICAgICAgICAgICAjINGA0LDRgdGH0LjRgtGL0LLQsNC10Lwg0LIg0LLRi9Cx0L7RgNC60LUg0L/RgNC+0L/QvtGA0YbQuNC4INC00LvRjyDQutCw0LbQtNC+0LPQviDQutC70LDRgdGB0LAKICAgICAgICAgICAgY2xhc3NfY291bnQgPSBbb2JbLTFdIGZvciBvYiBpbiBncm91cF0uY291bnQoY2xhc3NfdmFsKQogICAgICAgICAgICBwcm9wb3J0aW9uID0gY2xhc3NfY291bnQgLyBncm91cF9zaXplCiAgICAgICAgICAgICMg0YHRg9C80LzQuNGA0YPQtdC8INC60LLQsNC00YDQsNGC0Ysg0L/RgNC+0L/QvtGA0YbQuNC4CiAgICAgICAgICAgIHNjb3JlICs9IHByb3BvcnRpb24gKiBwcm9wb3J0aW9uCgogICAgICAgICMg0L/RgNC40LHQsNCy0LvRj9C10Lwg0LjQvdC00LXQutGBINCU0LbQuNC90Lgg0LTQu9GPINC00LDQvdC90L7QuSDQv9C+0LTQstGL0LHQvtGA0LrQuAogICAgICAgICMg0Log0LjRgtC+0LPQvtCy0L7QvNGDINC30L3QsNGH0LXQvdC40Y4g0LjQvdC00LXQutGB0LAg0JTQttC40L3QuAogICAgICAgIGdpbmkgKz0gKDEgLSBzY29yZSkgKiAoZ3JvdXBfc2l6ZSAvIHRvdGFsX3NhbXBsZXMpCgogICAgcmV0dXJuIGdpbmkgICMg0LrRgNC40YLQtdGA0LjQuSDQtNC20LjQvdC4INC00LvRjyDQtNCw0L3QvdC+0LPQviDRgNCw0LfQtNC10LvQtdC90LjRjwoKCiMg0KDQsNC30LTQtdC70LjRgtGMINCy0YvQsdC+0YDQutGDINC/0L4g0LLRi9Cx0YDQsNC90L3QvtC80YMg0L/RgNC10LTQuNC60LDRgtGDCmRlZiB0ZXN0X3NwbGl0KGluZGV4LCB2YWx1ZSwgZGF0YXNldCk6CiAgICAjINGB0L7Qt9C00LDRkdC8INC00LLQsCDQvdC+0LLRi9GFINGB0L/QuNGB0LrQsCAtINC70LXQstCw0Y8g0L/QvtC00LLRi9Cx0L7RgNC60LAg0Lgg0L/RgNCw0LLQsNGPINC/0L7QtNCy0YvQsdC+0YDQutCwCiAgICBsZWZ0ID0gbGlzdCgpCiAgICByaWdodCA9IGxpc3QoKQoKICAgICMg0L/RgNC+0LLQtdGA0Y/QtdC8INC60LDQttC00YvQuSDRjdC70LXQvNC10L3RgiDQstGL0LHQvtGA0LrQuCDQvdCwINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQtSDQt9Cw0LTQsNC90L3QvtC80YMg0L/RgNC10LTQuNC60LDRgtGDCiAgICAjINC/0YDQtdC00LjQutCw0YIg0YHQvtGB0YLQvtC40YIg0LjQtyDQutGA0LjRgtC10YDQuNGPIC0gaW5kZXgg0Lgg0LfQvdCw0YfQtdC90LjRjyDQutGA0LjRgtC10YDQuNGPIC0gdmFsdWUKICAgIGZvciByb3cgaW4gZGF0YXNldDoKICAgICAgICBpZiByb3dbaW5kZXhdIDwgdmFsdWU6ICAjINC10YHQu9C4INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINC/0YDQtdC00LjQutCw0YLRgwogICAgICAgICAgICByaWdodC5hcHBlbmQocm93KSAgIyDRgtC+INC+0YLQv9GA0LDQstC70Y/QtdC8INCyINC/0YDQsNCy0L7QtSDQv9C+0LTQtNC10YDQtdCy0L4KICAgICAgICBlbHNlOiAgIyDQsCDQtdGB0LvQuCDQvdC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINC/0YDQtdC00LjQutCw0YLRgwogICAgICAgICAgICBsZWZ0LmFwcGVuZChyb3cpICAjINGC0L4g0L7RgtC/0YDQsNCy0LvRj9C10Lwg0LIg0LvQtdCy0L7QtSDQv9C+0LTQtNC10YDQtdCy0L4KCiAgICAjINCy0L7Qt9Cy0YDQsNGJ0LDQtdC8INC90LDRiNC1INGA0LDQt9Cx0LjQtdC90LjQtQogICAgcmV0dXJuIGxlZnQsIHJpZ2h0CgoKIyDQktC90YPRgtGA0LXQvdC90LjQuSDRg9C30LXQuwpjbGFzcyBJbm5lck5vZGU6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY3JpdGVyaW9uLCB2YWx1ZSwgZ3JvdXBzKToKICAgICAgICAjINGB0L7QtNC10YDQttC40YIg0LIg0YHQtdCx0LUg0L/RgNC10LTQuNC60LDRgiwg0LrQvtGC0L7RgNGL0Lkg0YHQvtGB0YLQvtC40YIg0LjQtwogICAgICAgIHNlbGYuY3JpdGVyaW9uID0gY3JpdGVyaW9uICAjINC60YDQuNGC0LXRgNC40Y8KICAgICAgICBzZWxmLnZhbHVlID0gdmFsdWUgICMg0Lgg0LfQvdCw0YfQtdC90LjRjyDQutGA0LjRgtC10YDQuNGPCgogICAgICAgIHNlbGYubGVmdCwgc2VsZi5yaWdodCA9IGdyb3VwcyAgIyDRgdGB0YvQu9C60Lgg0L3QsCDQv9C+0YHQu9C10LTRg9GO0YnQuNC1INGD0LfQu9GLCgoKIyDQktGL0LHRgNCw0YLRjCDQu9GD0YfRiNC10LUg0YDQsNC30LHQuNC10L3QuNC1INC00LvRjyDQtNCw0YLQsNGB0LXRgtCwCmRlZiBnZXRfc3BsaXQoZGF0YXNldCk6CiAgICBjbGFzc192YWx1ZXMgPSBsaXN0KHNldChyb3dbLTFdIGZvciByb3cgaW4gZGF0YXNldCkpCgogICAgYmVzdF9jcml0ZXJpb24gPSAwCiAgICBiZXN0X3ZhbHVlID0gMAogICAgYmVzdF9naW5pID0gOTk5OTkKICAgIGJlc3RfZ3JvdXBzID0gTm9uZQogICAgIyDQv9GA0L7QudGC0LjRgdGMINC/0L4g0LLRgdC10Lwg0YHRgtC+0LvQsdGG0LDQvCwg0LrRgNC+0LzQtSDQv9C+0YHQu9C10LTQvdC10LPQvgogICAgIyDRgtC+INC10YHRgtGMLCDQv9GA0L7QudGC0LjRgdGMINC/0L4g0LLRgdC10Lwg0LrRgNC40YLQtdGA0LjRj9C8INGCLtC6LiDQv9C+0YHQu9C10LTQvdC40Lkg0YHRgtC+0LvQsdC10YYgLSDQutC70LDRgdGBCiAgICBmb3IgaW5kZXggaW4gcmFuZ2UobGVuKGRhdGFzZXRbMF0pIC0gMSk6CiAgICAgICAgIyDQv9GA0L7QudGC0LjRgdGMINC/0L4g0LrQsNC20LTQvtC5INGB0YLRgNC+0YfQutC1INCyINCy0YvQsdC+0YDQutC1CiAgICAgICAgZm9yIHJvdyBpbiBkYXRhc2V0OgogICAgICAgICAgICAjINC30LTQtdGB0Ywg0LzRiyDQv9GA0L7RhdC+0LTQuNC8INC/0L4g0LrQsNC20LTQvtC80YMg0LrRgNC40YLQtdGA0LjRjiDQutCw0LbQtNC+0LPQviDRjdC70LXQvNC10L3RgtCwINCy0YvQsdC+0YDQutC4LAogICAgICAgICAgICAjINC/0YDQvtCx0YPQtdC8INGA0LDQt9C00LXQu9C40YLRjCDQstGL0LHQvtGA0LrRgyDQv9C+INCy0YvQsdGA0LDQvdC90L7QvNGDINC60YDQuNGC0LXRgNC40Y4g0Lgg0YDQsNGB0YfQuNGC0LDRgtGMINC10LPQviDQuNC90LTQtdC60YEg0JTQttC40L3QuAogICAgICAgICAgICBncm91cHMgPSB0ZXN0X3NwbGl0KGluZGV4LCByb3dbaW5kZXhdLCBkYXRhc2V0KQogICAgICAgICAgICBnaW5pID0gZ2luaV9pbmRleChncm91cHMsIGNsYXNzX3ZhbHVlcykgICMgISBnaW5pX2luZGV4INC80Ysg0YDQtdCw0LvQuNC30L7QstCw0LvQuCDQsiDQv9GA0LXQtNGL0LTRg9GJ0LXQuSDRgdGC0LDRgtGM0LUKCiAgICAgICAgICAgICMg0LXRgdC70Lgg0LfQvdCw0YfQtdC90LjQtSDQuNC90LTQtdC60YHQsCDQlNC20LjQvdC4INC70YPRh9GI0LUg0YfQtdC8INGDINC/0YDQtdC00YvQtNGD0YnQtdCz0L4g0YDQsNC30LHQuNC10L3QuNGPLAogICAgICAgICAgICAjINGC0L4g0YHQvtGF0YDQsNC90Y/QtdC8INC10LPQvi4g0KLQsNC60LjQvCDQvtCx0YDQsNC30L7QvCDRgyDQvdCw0YEg0LIg0LrQvtC90YbQtSDQvtGB0YLQsNC90LXRgtGB0Y8g0LvRg9GH0YjQtdC1INGA0LDQt9Cx0LjQtdC90LjQtQogICAgICAgICAgICBpZiBnaW5pIDwgYmVzdF9naW5pOgogICAgICAgICAgICAgICAgYmVzdF9jcml0ZXJpb24gPSBpbmRleAogICAgICAgICAgICAgICAgYmVzdF92YWx1ZSA9IHJvd1tpbmRleF0KICAgICAgICAgICAgICAgIGJlc3RfZ2luaSA9IGdpbmkKICAgICAgICAgICAgICAgIGJlc3RfZ3JvdXBzID0gZ3JvdXBzCgogICAgIyDQstC+0LfQstGA0LDRidCw0LXQvCDQu9GD0YfRiNC10LUg0YDQsNC30LHQuNC10L3QuNC1INC4INC10LPQviDQv9GA0LXQtNC40LrQsNGCCiAgICByZXR1cm4gSW5uZXJOb2RlKGJlc3RfY3JpdGVyaW9uLCBiZXN0X3ZhbHVlLCBiZXN0X2dyb3VwcykK","name":"get_split.py","type":"text/plain","lastModified":1624459674000},{"dataUri":"data:text/plain;base64,Y2xhc3MgVGVybWluYWxOb2RlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGdyb3VwKToKICAgICAgICAjINC00L7RgdGC0LDQvdC10Lwg0LjQtyDQstGL0LHQvtGA0LrQuCDRgdC/0LjRgdC+0Log0LrQu9Cw0YHRgdC+0LIKICAgICAgICBvdXRjb21lcyA9IFtyb3dbLTFdIGZvciByb3cgaW4gZ3JvdXBdCiAgICAgICAgIyDQt9Cw0L/QuNGB0YvQstCw0LXQvCDQvdCw0LjQsdC+0LvQtdC1INGH0LDRgdGC0L4g0LLRgdGC0YDQtdGH0LDRjtGJ0LjQudGB0Y8g0LrQu9Cw0YHRgQogICAgICAgIHNlbGYuY2xhc3NfdmFsID0gbWF4KHNldChvdXRjb21lcyksIGtleT1vdXRjb21lcy5jb3VudCkK","name":"terminal.py","type":"text/plain","lastModified":1624459674000},{"dataUri":"data:text/plain;base64,IyBQcmludCBhIGRlY2lzaW9uIHRyZWUKZGVmIHByaW50X3RyZWUobm9kZSwgZGVwdGg9MCwgcHJlZml4PSIiKToKICAgICMg0LXRgdC70Lgg0LLQvdC10YLRgNC10L3QvdC40Lkg0YPQt9C10LssINGC0L4g0L3QsNC/0LXRh9Cw0YLQsNGC0Ywg0LXQs9C+INC/0YDQtdC00LjQutCw0YIKICAgICMg0Lgg0L/QtdGH0LDRgtCw0YLRjCDQtNC+0YfQtdGA0L3QuNC1INGD0LfQu9GLINGA0LXQutGD0YDRgdC40LLQvdC+CiAgICBpZiBpc2luc3RhbmNlKG5vZGUsIElubmVyTm9kZSk6CiAgICAgICAgcHJpbnQoZGVwdGggKiAiXHhhMCIsIHByZWZpeCwgY3JpdGVyaW9uc1tub2RlLmNyaXRlcmlvbl0sICc8Jywgbm9kZS52YWx1ZSwgIj8iKQogICAgICAgIHByaW50X3RyZWUobm9kZS5yaWdodCwgZGVwdGggKyAxLCAi0LTQsCAtPiIpCiAgICAgICAgcHJpbnRfdHJlZShub2RlLmxlZnQsIGRlcHRoICsgMSwgItC90LXRgiAtPiIpCgogICAgIyDQtdGB0LvQuCDRgtC10YDQvNC40L3QsNC70YzQvdGL0Lkg0YPQt9C10LssINGC0L4g0L3QsNC/0LXRh9Cw0YLQsNGC0Ywg0LXQs9C+INC60LvQsNGB0YEKICAgIGlmIGlzaW5zdGFuY2Uobm9kZSwgVGVybWluYWxOb2RlKToKICAgICAgICBwcmludChkZXB0aCAqICJceGEwIiwgcHJlZml4LCBub2RlLmNsYXNzX3ZhbCkKCiMg0L/RgNC+0LLQtdGA0LjQvCDRgNC10LDQu9C40LfQsNGG0LjRjiDQvdCwINC90LXQsdC+0LvRjNGI0L7QvCDQutGD0YHQvtGH0LrQtSDQstGL0LHQvtGA0LrQuCDQuNC3INCY0YDQuNGB0L7QsiDQoNC+0L3QsNC70YzQtNCwINCk0LjRiNC10YDQsApjcml0ZXJpb25zID0gWyLQlNC70LjQvdCwINGH0LDRiNC10LvQuNGB0YLQvdC40LrQsCIsICLQqNC40YDQuNC90LAg0YfQsNGI0LXQu9C40YHRgtC90LjQutCwIiwgItCU0LvQuNC90LAg0LvQtdC/0LXRgdGC0LrQsCIsICLQqNC40YDQuNC90LAg0LvQtdC/0LXRgdGC0LrQsCIsICLQutC70LDRgdGBIiAgICAgXQpkYXRhc2V0ID0gW1sgIDUuMSwgICAgICAgICAgICAgICAgICAzLjUsICAgICAgICAgICAgICAgICAgICAxLjQsICAgICAgICAgICAgICAwLjIsICAgICAgICAgICAgICAic2V0b3NhIiAgICBdLAogICAgICAgICAgIFsgIDUuMywgICAgICAgICAgICAgICAgICAzLjcsICAgICAgICAgICAgICAgICAgICAxLjUsICAgICAgICAgICAgICAwLjIsICAgICAgICAgICAgICAic2V0b3NhIiAgICBdLAogICAgICAgICAgIFsgIDUuMCwgICAgICAgICAgICAgICAgICAzLjMsICAgICAgICAgICAgICAgICAgICAxLjQsICAgICAgICAgICAgICAwLjIsICAgICAgICAgICAgICAic2V0b3NhIiAgICBdLAogICAgICAgICAgIFsgIDYuMywgICAgICAgICAgICAgICAgICAzLjMsICAgICAgICAgICAgICAgICAgICA0LjcsICAgICAgICAgICAgICAxLjYsICAgICAgICAgICAgICAidmVyc2ljb2xvciJdLAogICAgICAgICAgIFsgIDUuOCwgICAgICAgICAgICAgICAgICAyLjcsICAgICAgICAgICAgICAgICAgICAzLjksICAgICAgICAgICAgICAxLjIsICAgICAgICAgICAgICAidmVyc2ljb2xvciJdLAogICAgICAgICAgIFsgIDYuMCwgICAgICAgICAgICAgICAgICAyLjcsICAgICAgICAgICAgICAgICAgICA1LjEsICAgICAgICAgICAgICAxLjYsICAgICAgICAgICAgICAidmVyc2ljb2xvciJdLAogICAgICAgICAgIFsgIDYuNywgICAgICAgICAgICAgICAgICAzLjMsICAgICAgICAgICAgICAgICAgICA1LjcsICAgICAgICAgICAgICAyLjEsICAgICAgICAgICAgICAidmlyZ2luaWNhIiBdLAogICAgICAgICAgIFsgIDcuMiwgICAgICAgICAgICAgICAgICAzLjIsICAgICAgICAgICAgICAgICAgICA2LjAsICAgICAgICAgICAgICAxLjgsICAgICAgICAgICAgICAidmlyZ2luaWNhIiBdLAogICAgICAgICAgIFsgIDUuOSwgICAgICAgICAgICAgICAgICAzLjAsICAgICAgICAgICAgICAgICAgICA1LjEsICAgICAgICAgICAgICAxLjgsICAgICAgICAgICAgICAidmlyZ2luaWNhIiBdXQoKCnRyZWUgPSBidWlsZF90cmVlKGRhdGFzZXQsIDMsIDMpCnByaW50X3RyZWUodHJlZSk=","name":"test.py","type":"text/plain","lastModified":1624459674000}]},"title":"Files"},{"name":"MarkDownExecutor","data":{"md":"\r\n# Построение дерева\r\n\r\nЧто ж, у нас есть критерий ветвления Джини и способ разделения выборки на две подвыборки согласно этому критерию.\r\n\r\n### Но на этом ведь дерево не построить!?\r\n\r\nНу, если выборка будет состоять всего из двух классов,\r\nкоторые можно явно разделить одним предикатом, то можно!\r\n\r\nНо к сожалению очень большая часть данных, с которыми приходится работать датасатанистам,\r\nне такая простая, а очень даже сложная!\r\n\r\n### И что же делать в таком случае?\r\n\r\nНу, пока мы можем разделить выборку один раз. В предыдущей статье мы успешно отделили\r\nкласс **setosa** от остальных классов. **setosa** пошла в левую сторону, а **versicolor** и **virginica** в правую.\r\n\r\nТак как в левой ветви все элементы принадлежат одному классу, то там стоит построить **терминальный узел**.\r\nЭто тот который называется \"листом🍁\" дерева. Терминальный узел хранит в себе значение класса,\r\nк которому будут относится объекты, попавшие в \"лист🍁\".\r\n\r\n## Терминальный узел\r\n\r\n<div id=\"terminal_editor\"></div>\r\n\r\n\r\nНо если для левой стороны всё понятно, то в правой стороне есть два класса. Их ведь тоже стоит разделить.\r\n\r\n### Значит нам нужно строить дерево рекурсивно!\r\n\r\nДа! Для каждого узла мы будем решать: разделить выборку или построить терминальный узел.\r\n\r\nЕсли мы решим что выборку нужно поделить, то текущий узел будет \"внутренним узлом\", от которого пойдут\r\nдва новых - левый и правый. И с каждым новым узлом мы будем повторять эту процедуру.\r\n\r\n## Условия завершения построения\r\n\r\nЕщё стоит уточнить, что решающим деревьям свойственно переобучение. Это состояние, при которым обученное\r\nдерево хорошо классифицирует объекты по которым обучалась и плохо классифицирует новые объекты.\r\nПереобучение происходит когда дерево очень сильно разрастается.\r\n\r\nНам нужно решить когда стоит прекратить выращивать дерево.\r\n\r\nВ жизни вообще очень важно понимать когда стоит остановиться!\r\n\r\nМы можем остановить рост дерева когда оно достигает **определённой глубины** или остановить рост ветки, если\r\nподвыборка достигает **определённого размера**.\r\n\r\n## Рекурсивное построение дерева\r\n\r\n<div id=\"split_editor\"></div>\r\n\r\n## Тестирование реализации\r\n\r\nТеперь, когда у нас готов алгоритм построения дерева, давайте затестируем его.\r\n\r\nТы так же можешь менять код во всех редакторах, это будет влиять на итоговое поведение программы.\r\n\r\n\r\n<div id=\"test_editor\"></div>\r\n"},"title":"Markdown","collapsed":true},{"name":"PythonExecutor","data":{"id":"console_1"},"title":"Python console"},{"name":"JSExecutor","data":{"code":"((async() => {\n    \n    let get_split_txt = await LTN.files.getFileAsText(\"get_split.py\");\n    let terminal_txt = await LTN.files.getFileAsText(\"terminal.py\");\n    let split_txt = await LTN.files.getFileAsText(\"build_tree.py\");\n    let test_txt = await LTN.files.getFileAsText(\"test.py\");\n    \n    \n    var terminal_editor = ace.edit(\"terminal_editor\");\n    terminal_editor.getSession().setValue(terminal_txt)\n\tterminal_editor.getSession().setMode(\"ace/mode/python\");\n\tterminal_editor.setOptions({maxLines: 60, minLines: 7});\n\n    var split_editor = ace.edit(\"split_editor\");\n    split_editor.getSession().setValue(split_txt);\n\tsplit_editor.getSession().setMode(\"ace/mode/python\");\n\tsplit_editor.setOptions({maxLines: 60, minLines: 7});\n\n    var test_editor = ace.edit(\"test_editor\");\n    test_editor.getSession().setValue(test_txt);\n\ttest_editor.getSession().setMode(\"ace/mode/python\");\n\ttest_editor.setOptions({maxLines: 60, minLines: 7});\n\n    let test_code_output = document.getElementById(\"console_1\");\n    test_code_output.attachEditor(test_editor);\n    test_code_output.before_launch = () => {\n        test_code_output.pre_codes = [\n            get_split_txt,\n            terminal_editor.getValue(),\n            split_editor.getValue(),\n        ];\n    }\n    \n})());"},"title":"JavaScript executor"}]}